
### TRAFFIC SIGN PREDICTION ###
import sign as SN

# 1. create a Sign object,
# note: model file "libsvm.dat" should be on current execution dir

sn = SN.Sign()
# 2. predict a image if has a sign 
# img: cv2.Image
# class_id: {-1: "no sign", 
#           0: "right fork",
#           1: "left fork",
#           2:"Right turn", 
#           3:"left turn",
#           4: "left U-turn",
#           5: "right U-turn"}

class_id = sn.predict(img)    


### OBSTACLE DETECTION ###
import obstacle
# img: cv2.Image
# loc: -1: "No obstacle", 0: "on left", 1: "in middle", 2: "on right"
loc = obstacle.detect(img)

### PREDICT THE LANE OUR CAR IS ON ###

# img: cv2.Image
## lane ID 
## from left to right: 0, 1, 2, 3, 4, 5
## Example
import lane
import cv2

lane_id = lan.locate(img)

===============Update 09-20==================

### PREDICT THE LANE FORM
import lane
import cv2

# img: cv2.Image
# form: {-1: NONE, 0: straight, 1: bending}
# cut_line: [[x_min, y_min], [x_max, y_max]]

form, cut_line = lane.predict_form(img)

===============Update 09-25==================

#### New feature
### DETECT IF CAR IS ON MAIN LANES
import lane
import cv2

#img: cv2.Image
#on_which: {1: on main lanes
#           -1: on narrow lanes,
#            0: unknown}

on_which = lane.on_main_lanes(img)

#### Improvements
# 1.  improve sensitivity of fork sign detection
# 2.  reduce error rate of sign detection
 
